/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

defaultTasks = ['assemble']

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

jar.enabled = false // We don't produce a jar

configurations {
  provided
  testCompile.extendsFrom provided
}

repositories {
  mavenLocal()
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  mavenCentral()
}

dependencies {
  compile "org.python:jython-standalone:$jythonVersion"

  provided "org.vert-x:vertx-core:$vertxVersion"
  provided "org.vert-x:vertx-platform:$vertxVersion"

  testCompile( "org.vert-x:vertx-testframework:$vertxVersion" ) {
    transitive = false
  }
  testCompile  "junit:junit:$junitVersion"
}

sourceSets {
  main {
    compileClasspath = compileClasspath + configurations.provided
  }
  test {
    resources {
      srcDirs "src/test/python_scripts", "src/test/resources"
    }
  }
}

task copyMod( type:Copy, dependsOn: 'classes' ) {
  into "build/mod/$modulename-v$version"
  from 'build/classes/main'
  from 'src/main/conf'
  from 'src/main/api_shim'
//  into( 'lib' ) {
//    from configurations.compile
//  }
  //NOTE! That we copy the patched jython jar from extralibs, we
  //DO NOT use the version from Maven
  //See the README in there for reasons why
  into('lib') {
    from 'extralibs'
  }
}

// Package into build/libs/mod.zip
task dist( type: Zip, dependsOn: 'copyMod' ) {
  group = 'vert.x'
  description = "Assembles a vert.x module in 'mod.zip' format"
  destinationDir = project.file('build/libs')
  archiveName = 'mod.zip'
  from project.file("build/mod")
}


task prepareVertxTest(type: Copy, dependsOn: ['copyMod', 'deleteCopiedMod'] ) {
  from 'build/mod'
  into 'src/test/mod-test' // Copy the mod into the mods directory
}

task deleteCopiedMod {
  outputs.upToDateWhen { false }
  delete "src/test/mod-test/$modulename-v$version"
}

test() {

  // Remove any classpath entries for the classes or resources of the jruby verticle and also remove the
  // jython jar from the classpath
  // If we don't do this then the system classloader will load them which can cause issues with loading resources
  // from inside JS verticles
  classpath = files( classpath.findAll {
    (!( it.toString() ==~ /.+build\/(classes|resources)\/main$/ )) && !(it.toString().contains("org.python"))
  } )

//  classpath.each {
//    println "entry ${it}"
//  }

  outputs.upToDateWhen { false }

  // Some vert.x properties
  systemProperty 'vertx.test.timeout', 15
  systemProperty 'vertx.mods', "$projectDir/src/test/mod-test"  // Set vertx.mods to the mod directory
  systemProperty 'vertx.version', "$project.version"
  jvmArgs '-XX:+CMSClassUnloadingEnabled', '-XX:-UseGCOverheadLimit', '-XX:MaxPermSize=256m'

  // Show output
  testLogging.showStandardStreams = true

  // No idea why we need to depend on testClasses...
  dependsOn << [ 'testClasses', 'copyMod', 'prepareVertxTest' ]
}


task collectDeps(type: Copy) {
  group = 'vert.x'
  description = 'conveniently collect dependencies for other IDEs'
  destinationDir = file("build/deps")
  into("compile") {
    from configurations.compile
  }
  into("test") {
    from configurations.testCompile
  }
}

task pydoc(type: Exec) {
  ignoreExitValue true
  workingDir = project.projectDir

  commandLine = [ System.getenv()['JYTHON_HOME'] + "/jython",
      "-Dproj.base=${project.projectDir}",
      "-Dpython.path=${project.projectDir}/src/build_tools/doclib" + System.properties['path.separator'] + "src/main/python_scripts",
      "-Dproj.base=$project.projectDir.path",
      "${project.projectDir}/src/build_tools/pydocx.py" ]

  if( System.properties['os.name'].toLowerCase().contains('windows') ) {
    commandLine = ['cmd', '/c'] + commandLine
  }
}